from typing import Coroutine, Any

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, CallbackQuery, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from storage.channel_store import add_channel, remove_channel, list_channels, has_channels

manage_channel = Router()

class ChannelStates(StatesGroup):
    adding: State = State()
    removing: State = State()

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å")],
        [KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å")],
        [KeyboardButton(text="üìÉ –°–ø–∏—Å–æ–∫")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

@manage_channel.message(F.text == "/channels")
async def manage_channels(msg: Message) -> Coroutine[Any, Any, None]:
    await msg.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:", reply_markup=menu_keyboard)

@manage_channel.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def ask_channel_add(msg: Message, state: FSMContext) -> Coroutine[Any, Any, None]:
    await msg.answer("–ü—Ä–∏—à–ª–∏ username –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ChannelStates.adding)

@manage_channel.message(ChannelStates.adding)
async def save_channel(msg: Message, state: FSMContext) -> Coroutine[Any, Any, None]:
    add_channel(msg.text)
    await msg.answer(f"–ö–∞–Ω–∞–ª @{msg.text.strip()} –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=menu_keyboard)
    await state.clear()

@manage_channel.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å")
async def ask_channel_remove(msg: Message, state: FSMContext) -> Coroutine[Any, Any, None]:
    channels = list_channels()
    if not channels:
        await msg.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=ch, callback_data=f"remove:{ch}")]
            for ch in channels
        ]
    )
    await msg.answer("–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@manage_channel.callback_query(F.data.startswith("remove:"))
async def handle_channel_remove(cbq: CallbackQuery) -> Coroutine[Any, Any, None]:
    channel = cbq.data.split("remove:")[1]
    if remove_channel(channel):
        await cbq.message.edit_text(f"–ö–∞–Ω–∞–ª @{channel} —É–¥–∞–ª—ë–Ω ‚ùå")
    else:
        await cbq.message.edit_text("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@manage_channel.message(F.text == "üìÉ –°–ø–∏—Å–æ–∫")
async def list_channels_handler(msg: Message) -> Coroutine[Any, Any, None]:
    #if not has_channels():
        await msg.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    #else:
        channels_text = "\n".join(f"@{c}" for c in list_channels())
        await msg.answer("–°–ª–µ–∂—É –∑–∞:\n" + channels_text)
